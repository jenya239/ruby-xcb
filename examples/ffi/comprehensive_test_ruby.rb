#!/usr/bin/env ruby
require_relative '../lib/xcb'

def test_colors(conn, screen, window)
  puts "üé® –¢–µ—Å—Ç–∏—Ä—É—é —Ü–≤–µ—Ç–∞..."
  
  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ—Ä–º–∞–ø–∞
  colormap = XCB.xcb_generate_id(conn)
  XCB.xcb_create_colormap(conn, 0, colormap, window, screen[:root_visual])
  
  # –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
  color_cookie = XCB.xcb_alloc_color(conn, colormap, 65535, 0, 0)
  color_reply = XCB.xcb_alloc_color_reply(conn, color_cookie, nil)
  
  if !color_reply.null?
    puts "‚úÖ –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω"
# memory cleanup
  else
    puts "‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞"
  end
  
  XCB.xcb_free_colormap(conn, colormap)
end

def test_fonts(conn)
  puts "üî§ –¢–µ—Å—Ç–∏—Ä—É—é —à—Ä–∏—Ñ—Ç—ã..."
  
  font = XCB.xcb_generate_id(conn)
  XCB.xcb_open_font(conn, font, 5, "fixed")
  XCB.xcb_flush(conn)
  
  # –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à—Ä–∏—Ñ—Ç–µ
  font_cookie = XCB.xcb_query_font(conn, font)
  font_reply = XCB.xcb_query_font_reply(conn, font_cookie, nil)
  
  if !font_reply.null?
    puts "‚úÖ –®—Ä–∏—Ñ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω"
# memory cleanup
  else
    puts "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞"
  end
  
  XCB.xcb_close_font(conn, font)
end

def test_cursor(conn, screen, window)
  puts "üñ±Ô∏è –¢–µ—Å—Ç–∏—Ä—É—é –∫—É—Ä—Å–æ—Ä..."
  
  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∏–∫—Å–º–∞–ø–æ–≤ –¥–ª—è –∫—É—Ä—Å–æ—Ä–∞
  cursor_pixmap = XCB.xcb_generate_id(conn)
  mask_pixmap = XCB.xcb_generate_id(conn)
  
  XCB.xcb_create_pixmap(conn, 1, cursor_pixmap, window, 16, 16)
  XCB.xcb_create_pixmap(conn, 1, mask_pixmap, window, 16, 16)
  
  cursor = XCB.xcb_generate_id(conn)
  XCB.xcb_create_cursor(conn, cursor, cursor_pixmap, mask_pixmap,
                        0, 0, 0, 65535, 65535, 65535, 65535)
  
  puts "‚úÖ –ö—É—Ä—Å–æ—Ä —Å–æ–∑–¥–∞–Ω: #{cursor}"
  
  XCB.xcb_free_cursor(conn, cursor)
  XCB.xcb_free_pixmap(conn, cursor_pixmap)
  XCB.xcb_free_pixmap(conn, mask_pixmap)
end

def test_grab_input(conn, window)
  puts "‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞—Ö–≤–∞—Ç –≤–≤–æ–¥–∞..."
  
  # –ó–∞—Ö–≤–∞—Ç —É–∫–∞–∑–∞—Ç–µ–ª—è
  grab_cookie = XCB.xcb_grab_pointer(conn, 0, window,
    XCB::XCB_EVENT_MASK_BUTTON_PRESS, 0, 0, 0, 0, 0, 0)
  
  grab_reply = XCB.xcb_grab_pointer_reply(conn, grab_cookie, nil)
  if !grab_reply.null?
    puts "‚úÖ –£–∫–∞–∑–∞—Ç–µ–ª—å –∑–∞—Ö–≤–∞—á–µ–Ω"
# memory cleanup
    XCB.xcb_ungrab_pointer(conn)
  end
  
  # –ó–∞–ø—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ —É–∫–∞–∑–∞—Ç–µ–ª—è
  pointer_cookie = XCB.xcb_query_pointer(conn, window)
  pointer_reply = XCB.xcb_query_pointer_reply(conn, pointer_cookie, nil)
  
  if !pointer_reply.null?
    puts "‚úÖ –ü–æ–∑–∏—Ü–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–∞"
# memory cleanup
  end
end

def test_properties(conn, window)
  puts "üè∑Ô∏è –¢–µ—Å—Ç–∏—Ä—É—é —Å–≤–æ–π—Å—Ç–≤–∞..."
  
  # –ò–Ω—Ç–µ—Ä–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç–æ–º–∞
  atom_cookie = XCB.xcb_intern_atom(conn, 0, 8, "WM_CLASS")
  puts "‚úÖ –ê—Ç–æ–º WM_CLASS –∑–∞–ø—Ä–æ—à–µ–Ω"
  
  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π WM_CLASS atom)
  class_name = "TestApp\0TestClass\0"
  XCB.xcb_change_property(conn, 0, window, 67, # WM_CLASS —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π atom
                         31, 8, class_name.length, class_name) # XCB_ATOM_STRING = 31
  
  puts "‚úÖ –°–≤–æ–π—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
end

def test_extensions(conn)
  puts "üîå –¢–µ—Å—Ç–∏—Ä—É—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è..."
  
  # –ó–∞–ø—Ä–æ—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è BIG-REQUESTS
  ext_cookie = XCB.xcb_query_extension(conn, 12, "BIG-REQUESTS")
  puts "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ BIG-REQUESTS –∑–∞–ø—Ä–æ—à–µ–Ω–æ"
  
  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
  list_cookie = XCB.xcb_list_extensions(conn)
  puts "‚úÖ –°–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∑–∞–ø—Ä–æ—à–µ–Ω"
end

def test_drawing_functions(conn, screen, window)
  puts "üé® –¢–µ—Å—Ç–∏—Ä—É—é —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è..."
  
  # –°–æ–∑–¥–∞–Ω–∏–µ GC
  gc = XCB.xcb_generate_id(conn)
  values = FFI::MemoryPointer.new(:uint32, 1)
  values.write(:uint32, screen[:black_pixel])
  XCB.xcb_create_gc(conn, gc, window, XCB::XCB_GC_FOREGROUND, values)
  
  # –û—á–∏—Å—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–∏
  XCB.xcb_clear_area(conn, 0, window, 0, 0, 300, 200)
  
  # –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç–æ—á–µ–∫
  points = FFI::MemoryPointer.new(:int16, 4)
  points[0].write(:int16, 10)
  points[1].write(:int16, 10)
  points[2].write(:int16, 20)
  points[3].write(:int16, 20)
  XCB.xcb_poly_point(conn, 0, window, gc, 2, points)
  
  # –†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–π
  XCB.xcb_poly_line(conn, 0, window, gc, 2, points)
  
  # –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
  rect = XCB::Rectangle.new
  rect[:x] = 50
  rect[:y] = 50
  rect[:width] = 100
  rect[:height] = 80
  XCB.xcb_poly_rectangle(conn, window, gc, 1, rect)
  
  XCB.xcb_flush(conn)
  puts "‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã"
  
  XCB.xcb_free_gc(conn, gc)
end

# –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
puts "=== –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç Ruby XCB ==="

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
screen_ptr = FFI::MemoryPointer.new(:int)
conn = XCB.xcb_connect(nil, screen_ptr)

if conn.null? || XCB.xcb_connection_has_error(conn) != 0
  puts "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
  exit 1
end

# –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
setup = XCB.xcb_get_setup(conn)
screen_iter = XCB.xcb_setup_roots_iterator(setup)
screen = XCB::Screen.new(screen_iter[:data])

puts "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç–∫—Ä–∞–Ω—É: #{screen[:width_in_pixels]}x#{screen[:height_in_pixels]}"

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
values = FFI::MemoryPointer.new(:uint32, 1)
values.write(:uint32, XCB::XCB_EVENT_MASK_EXPOSURE)

window = XCB.xcb_generate_id(conn)
XCB.xcb_create_window(conn, XCB::XCB_COPY_FROM_PARENT, window, screen[:root],
                      100, 100, 300, 200, 1, XCB::XCB_WINDOW_CLASS_INPUT_OUTPUT,
                      screen[:root_visual], XCB::XCB_CW_EVENT_MASK, values)

XCB.xcb_map_window(conn, window)
XCB.xcb_flush(conn)

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
test_colors(conn, screen, window)
test_fonts(conn)
test_cursor(conn, screen, window)
test_grab_input(conn, window)
test_properties(conn, window)
test_extensions(conn)
test_drawing_functions(conn, screen, window)

puts "\nüéØ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π Ruby —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!"
puts "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è..."

gets

# –û—á–∏—Å—Ç–∫–∞
XCB.xcb_destroy_window(conn, window)
XCB.xcb_disconnect(conn)

puts "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ"