#!/usr/bin/env ruby
require_relative '../lib/xcb'

puts "=== Ruby XCB Cursor Test ==="

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
screen_ptr = FFI::MemoryPointer.new(:int)
conn = XCB.xcb_connect(nil, screen_ptr)

if conn.null? || XCB.xcb_connection_has_error(conn) != 0
  puts "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
  exit 1
end

# –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
setup = XCB.xcb_get_setup(conn)
screen_iter = XCB.xcb_setup_roots_iterator(setup)
screen = XCB::Screen.new(screen_iter[:data])

puts "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç–∫—Ä–∞–Ω—É: #{screen[:width_in_pixels]}x#{screen[:height_in_pixels]}"

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
values = FFI::MemoryPointer.new(:uint32, 2)
values[0].write(:uint32, screen[:white_pixel])  # background
values[1].write(:uint32, XCB::XCB_EVENT_MASK_EXPOSURE | XCB::XCB_EVENT_MASK_KEY_PRESS)

window = XCB.xcb_generate_id(conn)
XCB.xcb_create_window(conn, XCB::XCB_COPY_FROM_PARENT, window, screen[:root],
                      100, 100, 400, 300, 2, XCB::XCB_WINDOW_CLASS_INPUT_OUTPUT,
                      screen[:root_visual], 
                      XCB::XCB_CW_BACK_PIXEL | XCB::XCB_CW_EVENT_MASK, values)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
cursor_font = XCB.xcb_generate_id(conn)
XCB.xcb_open_font(conn, cursor_font, 6, "cursor")

cursor = XCB.xcb_generate_id(conn)
XCB.xcb_create_glyph_cursor(conn, cursor, cursor_font, cursor_font,
                           34, 35,  # crosshair glyph
                           0, 0, 0,      # foreground (black)
                           65535, 65535, 65535) # background (white)

puts "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –∫—É—Ä—Å–æ—Ä —Å–æ–∑–¥–∞–Ω: #{cursor}"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É—Ä—Å–æ—Ä–∞
cursor_vals = FFI::MemoryPointer.new(:uint32, 1)
cursor_vals.write(:uint32, cursor)
XCB.xcb_change_window_attributes(conn, window, XCB::XCB_CW_CURSOR, cursor_vals)

# GC –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ª–∏–Ω–∏–π
gc_vals = FFI::MemoryPointer.new(:uint32, 1)
gc_vals.write(:uint32, screen[:black_pixel])
gc = XCB.xcb_generate_id(conn)
XCB.xcb_create_gc(conn, gc, window, XCB::XCB_GC_FOREGROUND, gc_vals)

# –ü–æ–∫–∞–∑ –æ–∫–Ω–∞
XCB.xcb_map_window(conn, window)
XCB.xcb_flush(conn)
puts "‚úÖ –û–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –∫—É—Ä—Å–æ—Ä–æ–º"

# –¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
puts "üéØ –ù–∞–≤–µ–¥–∏—Ç–µ –º—ã—à—å –Ω–∞ –æ–∫–Ω–æ - –∫—É—Ä—Å–æ—Ä –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è"
puts "‚å®Ô∏è –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞"

loop do
  event = XCB.xcb_wait_for_event(conn)
  break if event.null?
  
  generic_event = XCB::GenericEvent.new(event)
  type = generic_event[:response_type] & ~0x80
  
  if type == XCB::XCB_EXPOSE
    # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ä–∞–º–∫—É)
    points = []
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –¥–ª—è —Ä–∞–º–∫–∏
    frame_points = [
      [50, 50], [350, 50],   # –≤–µ—Ä—Ö–Ω—è—è –ª–∏–Ω–∏—è
      [50, 50], [50, 250],   # –ª–µ–≤–∞—è –ª–∏–Ω–∏—è  
      [50, 250], [350, 250], # –Ω–∏–∂–Ω—è—è –ª–∏–Ω–∏—è
      [350, 50], [350, 250]  # –ø—Ä–∞–≤–∞—è –ª–∏–Ω–∏—è
    ]
    
    frame_points.each do |point_pair|
      point1 = XCB::Point.new
      point1[:x] = point_pair[0][0]
      point1[:y] = point_pair[0][1]
      
      point2 = XCB::Point.new  
      point2[:x] = point_pair[1][0]
      point2[:y] = point_pair[1][1]
      
      points_array = FFI::MemoryPointer.new(XCB::Point, 2)
      points_array[0].write_bytes(point1.to_ptr.read_bytes(XCB::Point.size))
      points_array[1].write_bytes(point2.to_ptr.read_bytes(XCB::Point.size))
      
      XCB.xcb_poly_line(conn, XCB::XCB_COORD_MODE_ORIGIN, window, gc, 2, points_array)
    end
    
    XCB.xcb_flush(conn)
    puts "üñºÔ∏è –õ–∏–Ω–∏–∏ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω—ã, –∫—É—Ä—Å–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω"
    
  elsif type == XCB::XCB_KEY_PRESS
    puts "‚å®Ô∏è –ö–ª–∞–≤–∏—à–∞ –Ω–∞–∂–∞—Ç–∞"
    break
  end
end

# –û—á–∏—Å—Ç–∫–∞
XCB.xcb_close_font(conn, cursor_font)
XCB.xcb_free_cursor(conn, cursor)
XCB.xcb_free_gc(conn, gc)
XCB.xcb_destroy_window(conn, window)
XCB.xcb_disconnect(conn)

puts "‚úÖ Ruby —Ç–µ—Å—Ç –∫—É—Ä—Å–æ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω"