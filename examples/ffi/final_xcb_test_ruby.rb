#!/usr/bin/env ruby
require_relative '../lib/xcb'

puts "=== FINAL XCB COMPREHENSIVE TEST (RUBY) ==="
puts "üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π XCB"

# 1. –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
screen_ptr = FFI::MemoryPointer.new(:int)
conn = XCB.xcb_connect(nil, screen_ptr)

if conn.null? || XCB.xcb_connection_has_error(conn) != 0
  puts "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
  exit 1
end

# –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
setup = XCB.xcb_get_setup(conn)
screen_iter = XCB.xcb_setup_roots_iterator(setup)
screen = XCB::Screen.new(screen_iter[:data])

puts "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: —ç–∫—Ä–∞–Ω #{screen[:width_in_pixels]}x#{screen[:height_in_pixels]}, –≥–ª—É–±–∏–Ω–∞ #{screen[:root_depth]}"

# 2. –°–û–ó–î–ê–ù–ò–ï –û–ö–ù–ê
win_values = FFI::MemoryPointer.new(:uint32, 2)
win_values[0].write(:uint32, screen[:white_pixel])  # background
win_values[1].write(:uint32, XCB::XCB_EVENT_MASK_EXPOSURE | XCB::XCB_EVENT_MASK_KEY_PRESS | XCB::XCB_EVENT_MASK_BUTTON_PRESS)

window = XCB.xcb_generate_id(conn)
XCB.xcb_create_window(conn, XCB::XCB_COPY_FROM_PARENT, window, screen[:root],
                      50, 50, 600, 400, 3, XCB::XCB_WINDOW_CLASS_INPUT_OUTPUT,
                      screen[:root_visual], 
                      XCB::XCB_CW_BACK_PIXEL | XCB::XCB_CW_EVENT_MASK, win_values)
puts "‚úÖ –û–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: 600x400"

# 3. –ì–†–ê–§–ò–ß–ï–°–ö–ò–ï –ö–û–ù–¢–ï–ö–°–¢–´ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ RGB –∑–Ω–∞—á–µ–Ω–∏—è)
white_vals = FFI::MemoryPointer.new(:uint32, 1)
white_vals.write(:uint32, screen[:white_pixel])
gc_white = XCB.xcb_generate_id(conn)
XCB.xcb_create_gc(conn, gc_white, window, XCB::XCB_GC_FOREGROUND, white_vals)

# –ü—Ä—è–º—ã–µ RGB –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ü–≤–µ—Ç–æ–≤
red_vals = FFI::MemoryPointer.new(:uint32, 1)
red_vals.write(:uint32, 0xFF0000)  # –∫—Ä–∞—Å–Ω—ã–π
gc_red = XCB.xcb_generate_id(conn)
XCB.xcb_create_gc(conn, gc_red, window, XCB::XCB_GC_FOREGROUND, red_vals)

green_vals = FFI::MemoryPointer.new(:uint32, 1)
green_vals.write(:uint32, 0x00FF00)  # –∑–µ–ª–µ–Ω—ã–π
gc_green = XCB.xcb_generate_id(conn)
XCB.xcb_create_gc(conn, gc_green, window, XCB::XCB_GC_FOREGROUND, green_vals)

blue_vals = FFI::MemoryPointer.new(:uint32, 1)
blue_vals.write(:uint32, 0x0000FF)  # —Å–∏–Ω–∏–π
gc_blue = XCB.xcb_generate_id(conn)
XCB.xcb_create_gc(conn, gc_blue, window, XCB::XCB_GC_FOREGROUND, blue_vals)

puts "‚úÖ –¶–≤–µ—Ç–∞: –∫—Ä–∞—Å–Ω—ã–π, –∑–µ–ª–µ–Ω—ã–π, —Å–∏–Ω–∏–π –≤—ã–¥–µ–ª–µ–Ω—ã"

# 4. –®–†–ò–§–¢
font = XCB.xcb_generate_id(conn)
XCB.xcb_open_font(conn, font, 4, "6x13")

text_vals = FFI::MemoryPointer.new(:uint32, 3)
text_vals[0].write(:uint32, screen[:black_pixel])
text_vals[1].write(:uint32, screen[:white_pixel])
text_vals[2].write(:uint32, font)

gc_text = XCB.xcb_generate_id(conn)
XCB.xcb_create_gc(conn, gc_text, window, 
                  XCB::XCB_GC_FOREGROUND | XCB::XCB_GC_BACKGROUND | XCB::XCB_GC_FONT, 
                  text_vals)
puts "‚úÖ –®—Ä–∏—Ñ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: 6x13"

# 5. –ö–£–†–°–û–† (–æ–¥–∏–Ω–∞—Ä–Ω—ã–π –∫—Ä–µ—Å—Ç–∏–∫, –∫–∞–∫ –≤ C –≤–µ—Ä—Å–∏–∏)
cursor_font = XCB.xcb_generate_id(conn)
XCB.xcb_open_font(conn, cursor_font, 6, "cursor")

cursor = XCB.xcb_generate_id(conn)
XCB.xcb_create_glyph_cursor(conn, cursor, cursor_font, cursor_font,
                           34, 34,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≥–ª–∏—Ñ –¥–ª—è –æ–¥–∏–Ω–∞—Ä–Ω–æ–≥–æ –∫—Ä–µ—Å—Ç–∏–∫–∞
                           0, 0, 0, 65535, 65535, 65535)

cursor_vals = FFI::MemoryPointer.new(:uint32, 1)
cursor_vals.write(:uint32, cursor)
XCB.xcb_change_window_attributes(conn, window, XCB::XCB_CW_CURSOR, cursor_vals)
puts "‚úÖ –ö—É—Ä—Å–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –∫—Ä–µ—Å—Ç–∏–∫"

# 6. –ü–û–ö–ê–ó –û–ö–ù–ê
XCB.xcb_map_window(conn, window)
XCB.xcb_flush(conn)
puts "‚úÖ –û–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ"

# 7. –¶–ò–ö–õ –°–û–ë–´–¢–ò–ô –° –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨–Æ
click_count = 0

puts "\nüéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:"
puts "üñ±Ô∏è –ö–ª–∏–∫–∞–π—Ç–µ –≤ –æ–∫–Ω–µ - –ø–æ—è–≤—è—Ç—Å—è —Ü–≤–µ—Ç–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã"
puts "‚å®Ô∏è –ù–∞–∂–º–∏—Ç–µ ESC –¥–ª—è –≤—ã—Ö–æ–¥–∞"

loop do
  event = XCB.xcb_wait_for_event(conn)
  break if event.null?
  
  generic_event = XCB::GenericEvent.new(event)
  type = generic_event[:response_type] & ~0x80
  
  if type == XCB::XCB_EXPOSE
    # –û—á–∏—Å—Ç–∫–∞ –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
    bg = XCB::Rectangle.new
    bg[:x] = 0
    bg[:y] = 0
    bg[:width] = 600
    bg[:height] = 400
    XCB.xcb_poly_fill_rectangle(conn, window, gc_white, 1, bg)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title = "=== FINAL XCB TEST (RUBY) ==="
    XCB.xcb_image_text_8(conn, title.length, window, gc_text, 150, 30, title)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    info = "Screen: #{screen[:width_in_pixels]}x#{screen[:height_in_pixels]} | Clicks: #{click_count} | Font: 6x13 | Cursor: crosshair"
    XCB.xcb_image_text_8(conn, info.length, window, gc_text, 20, 60, info)
    
    # –¶–≤–µ—Ç–Ω—ã–µ –¥–µ–º–æ-–∫–≤–∞–¥—Ä–∞—Ç—ã
    red_rect = XCB::Rectangle.new
    red_rect[:x] = 50
    red_rect[:y] = 100
    red_rect[:width] = 80
    red_rect[:height] = 60
    XCB.xcb_poly_fill_rectangle(conn, window, gc_red, 1, red_rect)
    
    green_rect = XCB::Rectangle.new
    green_rect[:x] = 150
    green_rect[:y] = 100
    green_rect[:width] = 80
    green_rect[:height] = 60
    XCB.xcb_poly_fill_rectangle(conn, window, gc_green, 1, green_rect)
    
    blue_rect = XCB::Rectangle.new
    blue_rect[:x] = 250
    blue_rect[:y] = 100
    blue_rect[:width] = 80
    blue_rect[:height] = 60
    XCB.xcb_poly_fill_rectangle(conn, window, gc_blue, 1, blue_rect)
    
    # –ü–æ–¥–ø–∏—Å–∏
    XCB.xcb_image_text_8(conn, 3, window, gc_text, 70, 180, "RED")
    XCB.xcb_image_text_8(conn, 5, window, gc_text, 165, 180, "GREEN")
    XCB.xcb_image_text_8(conn, 4, window, gc_text, 270, 180, "BLUE")
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    instr1 = "Click anywhere to add colored squares"
    instr2 = "Press ESC to exit"
    XCB.xcb_image_text_8(conn, instr1.length, window, gc_text, 150, 220, instr1)
    XCB.xcb_image_text_8(conn, instr2.length, window, gc_text, 220, 240, instr2)
    
    XCB.xcb_flush(conn)
    puts "üñºÔ∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω"
    
  elsif type == XCB::XCB_BUTTON_PRESS
    click_count += 1
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ button_press_event
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: response_type(1) + detail(1) + sequence(2) + time(4) + root(4) + event(4) + child(4) + root_x(2) + root_y(2) + event_x(2) + event_y(2)
    event_x = event.get_int16(24)  # event_x —Å–º–µ—â–µ–Ω–∏–µ 24
    event_y = event.get_int16(26)  # event_y —Å–º–µ—â–µ–Ω–∏–µ 26
    
    # –†–∏—Å—É–µ–º —Ü–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç –≤ –º–µ—Å—Ç–µ –∫–ª–∏–∫–∞
    click_gc = case click_count % 3
               when 1 then gc_red
               when 2 then gc_green
               else gc_blue
               end
    
    click_rect = XCB::Rectangle.new
    click_rect[:x] = event_x - 10
    click_rect[:y] = event_y - 10
    click_rect[:width] = 20
    click_rect[:height] = 20
    XCB.xcb_poly_fill_rectangle(conn, window, click_gc, 1, click_rect)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    info = "Screen: #{screen[:width_in_pixels]}x#{screen[:height_in_pixels]} | Clicks: #{click_count} | Font: 6x13 | Cursor: crosshair"
    
    # –û—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –±–µ–ª—ã–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–º
    info_bg = XCB::Rectangle.new
    info_bg[:x] = 15
    info_bg[:y] = 45
    info_bg[:width] = 570
    info_bg[:height] = 20
    XCB.xcb_poly_fill_rectangle(conn, window, gc_white, 1, info_bg)
    
    # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    XCB.xcb_image_text_8(conn, info.length, window, gc_text, 20, 60, info)
    
    XCB.xcb_flush(conn)
    
    puts "üñ±Ô∏è –ö–ª–∏–∫ ##{click_count} –≤ (#{event_x}, #{event_y})"
    
  elsif type == XCB::XCB_KEY_PRESS
    key_detail = event.get_uint8(1)  # detail –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Å–º–µ—â–µ–Ω–∏—é 1
    puts "‚å®Ô∏è –ö–ª–∞–≤–∏—à–∞: –∫–æ–¥ #{key_detail}"
    
    # ESC = –∫–æ–¥ 9
    if key_detail == 9
      puts "üö™ –í—ã—Ö–æ–¥ –ø–æ ESC"
      break
    end
  end
end

# 8. –û–ß–ò–°–¢–ö–ê
XCB.xcb_close_font(conn, font)
XCB.xcb_close_font(conn, cursor_font)
XCB.xcb_free_cursor(conn, cursor)
XCB.xcb_free_gc(conn, gc_white)
XCB.xcb_free_gc(conn, gc_red)
XCB.xcb_free_gc(conn, gc_green)
XCB.xcb_free_gc(conn, gc_blue)
XCB.xcb_free_gc(conn, gc_text)
XCB.xcb_destroy_window(conn, window)
XCB.xcb_disconnect(conn)

puts "\n‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô RUBY –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!"
puts "üéâ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ XCB –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ:"
puts "   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —ç–∫—Ä–∞–Ω—ã"
puts "   - –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–æ–Ω"
puts "   - –ö–æ–ª–æ—Ä–º–∞–ø—ã –∏ —Ü–≤–µ—Ç–∞"
puts "   - –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã"
puts "   - –®—Ä–∏—Ñ—Ç—ã –∏ —Ç–µ–∫—Å—Ç"
puts "   - –ö—É—Ä—Å–æ—Ä—ã"
puts "   - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π"
puts "   - –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤"