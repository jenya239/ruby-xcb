#!/usr/bin/env ruby
require_relative '../lib/xcb'

puts "=== Ruby XCB Color Test ==="

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
screen_ptr = FFI::MemoryPointer.new(:int)
conn = XCB.xcb_connect(nil, screen_ptr)

if conn.null? || XCB.xcb_connection_has_error(conn) != 0
  puts "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ X —Å–µ—Ä–≤–µ—Ä—É"
  exit 1
end

# –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
setup = XCB.xcb_get_setup(conn)
screen_iter = XCB.xcb_setup_roots_iterator(setup)
screen = XCB::Screen.new(screen_iter[:data])

puts "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç–∫—Ä–∞–Ω—É: #{screen[:width_in_pixels]}x#{screen[:height_in_pixels]}, –≥–ª—É–±–∏–Ω–∞: #{screen[:root_depth]}"

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
values = FFI::MemoryPointer.new(:uint32, 1)
values.write(:uint32, XCB::XCB_EVENT_MASK_EXPOSURE | XCB::XCB_EVENT_MASK_KEY_PRESS)

window = XCB.xcb_generate_id(conn)
XCB.xcb_create_window(conn, XCB::XCB_COPY_FROM_PARENT, window, screen[:root],
                      100, 100, 400, 300, 2, XCB::XCB_WINDOW_CLASS_INPUT_OUTPUT,
                      screen[:root_visual], XCB::XCB_CW_EVENT_MASK, values)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ—Ä–º–∞–ø–∞
colormap = XCB.xcb_generate_id(conn)
XCB.xcb_create_colormap(conn, 0, colormap, window, screen[:root_visual]) # XCB_COLORMAP_ALLOC_NONE = 0
puts "‚úÖ –ö–æ–ª–æ—Ä–º–∞–ø —Å–æ–∑–¥–∞–Ω: #{colormap}"

# GC –¥–ª—è –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –±–µ–ª—ã–π –ø–∏–∫—Å–µ–ª—å —ç–∫—Ä–∞–Ω–∞)
white_vals = FFI::MemoryPointer.new(:uint32, 1)
white_vals.write(:uint32, screen[:white_pixel])
gc_white = XCB.xcb_generate_id(conn)
XCB.xcb_create_gc(conn, gc_white, window, XCB::XCB_GC_FOREGROUND, white_vals)

# GC –¥–ª—è –∫—Ä–∞—Å–Ω–æ–≥–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ –ø–∏–∫—Å–µ–ª–∏ —ç–∫—Ä–∞–Ω–∞ –≤–º–µ—Å—Ç–æ alloc_color)
red_vals = FFI::MemoryPointer.new(:uint32, 1)
red_vals.write(:uint32, 0xFF0000) # –∫—Ä–∞—Å–Ω—ã–π –≤ RGB
gc_red = XCB.xcb_generate_id(conn)
XCB.xcb_create_gc(conn, gc_red, window, XCB::XCB_GC_FOREGROUND, red_vals)
puts "‚úÖ –ö—Ä–∞—Å–Ω—ã–π GC —Å–æ–∑–¥–∞–Ω"

# GC –¥–ª—è –∑–µ–ª–µ–Ω–æ–≥–æ 
green_vals = FFI::MemoryPointer.new(:uint32, 1)
green_vals.write(:uint32, 0x00FF00) # –∑–µ–ª–µ–Ω—ã–π –≤ RGB
gc_green = XCB.xcb_generate_id(conn)
XCB.xcb_create_gc(conn, gc_green, window, XCB::XCB_GC_FOREGROUND, green_vals)
puts "‚úÖ –ó–µ–ª–µ–Ω—ã–π GC —Å–æ–∑–¥–∞–Ω"

# GC –¥–ª—è —Å–∏–Ω–µ–≥–æ
blue_vals = FFI::MemoryPointer.new(:uint32, 1)
blue_vals.write(:uint32, 0x0000FF) # —Å–∏–Ω–∏–π –≤ RGB
gc_blue = XCB.xcb_generate_id(conn)
XCB.xcb_create_gc(conn, gc_blue, window, XCB::XCB_GC_FOREGROUND, blue_vals)
puts "‚úÖ –°–∏–Ω–∏–π GC —Å–æ–∑–¥–∞–Ω"

# –ü–æ–∫–∞–∑ –æ–∫–Ω–∞
XCB.xcb_map_window(conn, window)
XCB.xcb_flush(conn)
puts "‚úÖ –û–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞–º–∏"

# –¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π —Å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º
puts "üéØ –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞"

loop do
  event = XCB.xcb_wait_for_event(conn)
  break if event.null?
  
  generic_event = XCB::GenericEvent.new(event)
  type = generic_event[:response_type] & ~0x80
  
  if type == XCB::XCB_EXPOSE
    # –û—á–∏—Å—Ç–∫–∞ –æ–∫–Ω–∞ –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
    white_bg = XCB::Rectangle.new
    white_bg[:x] = 0
    white_bg[:y] = 0
    white_bg[:width] = 400
    white_bg[:height] = 300
    XCB.xcb_poly_fill_rectangle(conn, window, gc_white, 1, white_bg)
    
    # –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–Ω—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
    red_rect = XCB::Rectangle.new
    red_rect[:x] = 50
    red_rect[:y] = 50
    red_rect[:width] = 100
    red_rect[:height] = 80
    XCB.xcb_poly_fill_rectangle(conn, window, gc_red, 1, red_rect)
    
    green_rect = XCB::Rectangle.new
    green_rect[:x] = 200
    green_rect[:y] = 50
    green_rect[:width] = 100
    green_rect[:height] = 80
    XCB.xcb_poly_fill_rectangle(conn, window, gc_green, 1, green_rect)
    
    blue_rect = XCB::Rectangle.new
    blue_rect[:x] = 125
    blue_rect[:y] = 150
    blue_rect[:width] = 100
    blue_rect[:height] = 80
    XCB.xcb_poly_fill_rectangle(conn, window, gc_blue, 1, blue_rect)
    
    XCB.xcb_flush(conn)
    puts "üé® –û–∫–Ω–æ –æ—á–∏—â–µ–Ω–æ –∏ —Ü–≤–µ—Ç–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω—ã"
    
  elsif type == XCB::XCB_KEY_PRESS
    break
  end
end

# –û—á–∏—Å—Ç–∫–∞
XCB.xcb_free_gc(conn, gc_white)
XCB.xcb_free_gc(conn, gc_red)
XCB.xcb_free_gc(conn, gc_green)
XCB.xcb_free_gc(conn, gc_blue)
XCB.xcb_free_colormap(conn, colormap)
XCB.xcb_destroy_window(conn, window)
XCB.xcb_disconnect(conn)

puts "‚úÖ –¢–µ—Å—Ç —Ü–≤–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω"