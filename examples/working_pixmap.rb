#!/usr/bin/env ruby

require_relative '../lib/xcb'

puts "=== –†–∞–±–æ—á–∏–π –ø–∏–∫—Å–º–∞–ø XCB —Å —Å–æ–±—ã—Ç–∏—è–º–∏ ==="

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
screen_ptr = FFI::MemoryPointer.new(:int)
conn = XCB.xcb_connect(nil, screen_ptr)

if conn.null? || XCB.xcb_connection_has_error(conn) != 0
  puts "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
  exit 1
end

# –ü–æ–ª—É—á–µ–Ω–∏–µ screen
setup = XCB.xcb_get_setup(conn)
iter = XCB.xcb_setup_roots_iterator(setup)
screen = XCB::Screen.new(iter[:data])

root = screen[:root]
visual = screen[:root_visual]
root_depth = screen[:root_depth]
black_pixel = screen[:black_pixel]

puts "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —ç–∫—Ä–∞–Ω—É: #{screen_ptr.read_int}"
puts "üìä Root depth: #{root_depth}"
puts "üìä Black pixel: #{black_pixel}"

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–∫–Ω–∞
mask = XCB::XCB_CW_EVENT_MASK
values = FFI::MemoryPointer.new(:uint32, 1)
event_mask = XCB::XCB_EVENT_MASK_EXPOSURE | XCB::XCB_EVENT_MASK_KEY_PRESS
values.write_array_of_uint32([event_mask])

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
window_id = XCB.xcb_generate_id(conn)
puts "‚úÖ ID –æ–∫–Ω–∞: #{window_id}"

XCB.xcb_create_window(
  conn, XCB::XCB_COPY_FROM_PARENT, window_id, root,
  200, 200, 300, 300, 1,
  XCB::XCB_WINDOW_CLASS_INPUT_OUTPUT, visual,
  mask, values
)

# –ü–æ–∫–∞–∑ –æ–∫–Ω–∞
XCB.xcb_map_window(conn, window_id)
XCB.xcb_flush(conn)
puts "‚úÖ –û–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∏–∫—Å–º–∞–ø–∞
pixmap_id = XCB.xcb_generate_id(conn)
puts "‚úÖ ID –ø–∏–∫—Å–º–∞–ø–∞: #{pixmap_id}"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∏–∫—Å–º–∞–ø–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω–æ–π
XCB.xcb_create_pixmap(conn, root_depth, pixmap_id, window_id, 200, 200)
puts "‚úÖ –°–æ–∑–¥–∞–Ω –ø–∏–∫—Å–º–∞–ø 200x200 —Å –≥–ª—É–±–∏–Ω–æ–π #{root_depth}"

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
gc_id = XCB.xcb_generate_id(conn)
puts "‚úÖ ID GC: #{gc_id}"

# –°–æ–∑–¥–∞–Ω–∏–µ GC —Å —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º
gc_values = FFI::MemoryPointer.new(:uint32, 1)
gc_values.write_array_of_uint32([black_pixel])

XCB.xcb_create_gc(conn, gc_id, pixmap_id, XCB::XCB_GC_FOREGROUND, gc_values)
puts "‚úÖ –°–æ–∑–¥–∞–Ω GC —Å —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º"

# –†–∏—Å–æ–≤–∞–Ω–∏–µ –≤ –ø–∏–∫—Å–º–∞–ø–µ
rect = XCB::Rectangle.new
rect[:x] = 10
rect[:y] = 10
rect[:width] = 180
rect[:height] = 180

XCB.xcb_poly_rectangle(conn, pixmap_id, gc_id, 1, rect)
puts "‚úÖ –ù–∞—Ä–∏—Å–æ–≤–∞–Ω —á–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤ –ø–∏–∫—Å–º–∞–ø–µ"

# –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
puts "üéØ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è EXPOSE..."
puts "üí° –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞"

loop do
  event = XCB.xcb_wait_for_event(conn)
  break if event.null?
  
  event_type = event.read_uint8 & ~0x80
  
  case event_type
  when XCB::XCB_EXPOSE
    puts "üìã –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ EXPOSE - –∫–æ–ø–∏—Ä—É—é –ø–∏–∫—Å–º–∞–ø"
    XCB.xcb_copy_area(conn, pixmap_id, window_id, gc_id, 0, 0, 0, 0, 200, 200)
    XCB.xcb_flush(conn)
    puts "‚úÖ –ü–∏–∫—Å–º–∞–ø —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –æ–∫–Ω–æ"
    
  when XCB::XCB_KEY_PRESS
    puts "‚å®Ô∏è  –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ KEY_PRESS - –≤—ã—Ö–æ–¥"
    break
  end
  
  # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å–æ–±—ã—Ç–∏—è
  # FFI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–∞–º—è—Ç—å –¥–ª—è —Å–æ–±—ã—Ç–∏–π
end

puts "\nüéØ –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–Ω —á–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ!"

# –û—á–∏—Å—Ç–∫–∞
XCB.xcb_free_pixmap(conn, pixmap_id)
XCB.xcb_free_gc(conn, gc_id)
XCB.xcb_destroy_window(conn, window_id)
XCB.xcb_flush(conn)
XCB.xcb_disconnect(conn)
puts "‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã" 