#!/usr/bin/env ruby

require_relative '../lib/xcb'

puts "=== –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∏–∫—Å–º–∞–ø XCB ==="

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
screen_ptr = FFI::MemoryPointer.new(:int)
conn = XCB.xcb_connect(nil, screen_ptr)

if conn.null? || XCB.xcb_connection_has_error(conn) != 0
  puts "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
  exit 1
end

# –ü–æ–ª—É—á–µ–Ω–∏–µ screen
setup = XCB.xcb_get_setup(conn)
iter = XCB.xcb_setup_roots_iterator(setup)
screen = XCB::Screen.new(iter[:data])

root = screen[:root]
visual = screen[:root_visual]
white_pixel = screen[:white_pixel]
black_pixel = screen[:black_pixel]

puts "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —ç–∫—Ä–∞–Ω—É: #{screen_ptr.read_int}"
puts "üìä White pixel: #{white_pixel}"
puts "üìä Black pixel: #{black_pixel}"

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
window_id = XCB.xcb_generate_id(conn)
puts "‚úÖ ID –æ–∫–Ω–∞: #{window_id}"

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–∫–Ω–∞
value_mask = XCB::XCB_CW_BACK_PIXEL | XCB::XCB_CW_EVENT_MASK
value_list = FFI::MemoryPointer.new(:uint32, 2)
event_mask = XCB::XCB_EVENT_MASK_EXPOSURE
value_list.write_array_of_uint32([white_pixel, event_mask])

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
XCB.xcb_create_window(
  conn, XCB::XCB_COPY_FROM_PARENT, window_id, root,
  400, 400, 500, 400, 2,
  XCB::XCB_WINDOW_CLASS_INPUT_OUTPUT, visual,
  value_mask, value_list
)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∏–∫—Å–º–∞–ø–∞
pixmap_id = XCB.xcb_generate_id(conn)
puts "‚úÖ ID –ø–∏–∫—Å–º–∞–ø–∞: #{pixmap_id}"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∏–∫—Å–º–∞–ø–∞ 200x200
XCB.xcb_create_pixmap(conn, 24, pixmap_id, window_id, 200, 200)
puts "‚úÖ –°–æ–∑–¥–∞–Ω –ø–∏–∫—Å–º–∞–ø 200x200"

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–∏–∫—Å–º–∞–ø–∞
gc_pixmap = XCB.xcb_generate_id(conn)
puts "‚úÖ ID GC –¥–ª—è –ø–∏–∫—Å–º–∞–ø–∞: #{gc_pixmap}"

# –°–æ–∑–¥–∞–Ω–∏–µ GC –¥–ª—è –ø–∏–∫—Å–º–∞–ø–∞ —Å —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º
gc_mask = 0x00000004  # GCForeground
gc_values = FFI::MemoryPointer.new(:uint32, 1)
gc_values.write_array_of_uint32([black_pixel])

XCB.xcb_create_gc(conn, gc_pixmap, pixmap_id, gc_mask, gc_values)
puts "‚úÖ –°–æ–∑–¥–∞–Ω GC –¥–ª—è –ø–∏–∫—Å–º–∞–ø–∞ —Å —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º"

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∫–Ω–∞
gc_window = XCB.xcb_generate_id(conn)
puts "‚úÖ ID GC –¥–ª—è –æ–∫–Ω–∞: #{gc_window}"

# –°–æ–∑–¥–∞–Ω–∏–µ GC –¥–ª—è –æ–∫–Ω–∞ (–±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫)
XCB.xcb_create_gc(conn, gc_window, window_id, 0, nil)
puts "‚úÖ –°–æ–∑–¥–∞–Ω GC –¥–ª—è –æ–∫–Ω–∞"

# –û—á–∏—Å—Ç–∫–∞ –ø–∏–∫—Å–º–∞–ø–∞ (–±–µ–ª—ã–π —Ñ–æ–Ω)
XCB.xcb_clear_area(conn, 0, pixmap_id, 0, 0, 200, 200)
XCB.xcb_flush(conn)
puts "‚úÖ –ü–∏–∫—Å–º–∞–ø –æ—á–∏—â–µ–Ω (–±–µ–ª—ã–π —Ñ–æ–Ω)"

# –†–∏—Å–æ–≤–∞–Ω–∏–µ –≤ –ø–∏–∫—Å–º–∞–ø–µ - –±–æ–ª—å—à–æ–π —á–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
rect_data = FFI::MemoryPointer.new(:int16, 4)
rect_data.write_array_of_int16([10, 10, 180, 180])
XCB.xcb_poly_rectangle(conn, pixmap_id, gc_pixmap, 1, rect_data)
XCB.xcb_flush(conn)
puts "‚úÖ –ù–∞—Ä–∏—Å–æ–≤–∞–Ω —á–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤ –ø–∏–∫—Å–º–∞–ø–µ"

# –ü–æ–∫–∞–∑ –æ–∫–Ω–∞
XCB.xcb_map_window(conn, window_id)
XCB.xcb_flush(conn)
puts "‚úÖ –û–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ"

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏–∫—Å–º–∞–ø–∞ –≤ –æ–∫–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º GC –æ–∫–Ω–∞
XCB.xcb_copy_area(conn, pixmap_id, window_id, gc_window, 0, 0, 150, 100, 200, 200)
XCB.xcb_flush(conn)
puts "‚úÖ –ü–∏–∫—Å–º–∞–ø —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –æ–∫–Ω–æ (–∏—Å–ø–æ–ª—å–∑—É—è GC –æ–∫–Ω–∞)"

puts "\nüéØ –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–Ω —á–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ!"
puts "üìç –ü–æ–∑–∏—Ü–∏—è: (150, 100)"
puts "üìè –†–∞–∑–º–µ—Ä: 200x200"
puts "üé® –¶–≤–µ—Ç: —á–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ"

puts "\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è..."
gets

# –û—á–∏—Å—Ç–∫–∞
XCB.xcb_free_pixmap(conn, pixmap_id)
XCB.xcb_free_gc(conn, gc_pixmap)
XCB.xcb_free_gc(conn, gc_window)
XCB.xcb_destroy_window(conn, window_id)
XCB.xcb_flush(conn)
XCB.xcb_disconnect(conn)
puts "‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã" 