#!/usr/bin/env ruby
require_relative '../lib/xcb'

puts "=== Ruby XCB Input Grab Test ==="

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
screen_ptr = FFI::MemoryPointer.new(:int)
conn = XCB.xcb_connect(nil, screen_ptr)

if conn.null? || XCB.xcb_connection_has_error(conn) != 0
  puts "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
  exit 1
end

# –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
setup = XCB.xcb_get_setup(conn)
screen_iter = XCB.xcb_setup_roots_iterator(setup)
screen = XCB::Screen.new(screen_iter[:data])

puts "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç–∫—Ä–∞–Ω—É: #{screen[:width_in_pixels]}x#{screen[:height_in_pixels]}"

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
values = FFI::MemoryPointer.new(:uint32, 2)
values[0].write(:uint32, screen[:white_pixel])  # background
values[1].write(:uint32, XCB::XCB_EVENT_MASK_EXPOSURE | XCB::XCB_EVENT_MASK_KEY_PRESS | XCB::XCB_EVENT_MASK_BUTTON_PRESS)

window = XCB.xcb_generate_id(conn)
XCB.xcb_create_window(conn, XCB::XCB_COPY_FROM_PARENT, window, screen[:root],
                      100, 100, 500, 300, 2, XCB::XCB_WINDOW_CLASS_INPUT_OUTPUT,
                      screen[:root_visual], 
                      XCB::XCB_CW_BACK_PIXEL | XCB::XCB_CW_EVENT_MASK, values)

# GC –¥–ª—è —Ç–µ–∫—Å—Ç–∞
gc_vals = FFI::MemoryPointer.new(:uint32, 1)
gc_vals.write(:uint32, screen[:black_pixel])
gc = XCB.xcb_generate_id(conn)
XCB.xcb_create_gc(conn, gc, window, XCB::XCB_GC_FOREGROUND, gc_vals)

# –ü–æ–∫–∞–∑ –æ–∫–Ω–∞
XCB.xcb_map_window(conn, window)
XCB.xcb_flush(conn)
puts "‚úÖ –û–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ"

# –¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π —Å —Ç–µ—Å—Ç–∞–º–∏ –∑–∞—Ö–≤–∞—Ç–∞
stage = 1
puts "\nüéØ –≠—Ç–∞–ø #{stage}: –û–±—ã—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–∫–ª–∏–∫ –≤ –æ–∫–Ω–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É)"

loop do
  event = XCB.xcb_wait_for_event(conn)
  break if event.null?
  
  generic_event = XCB::GenericEvent.new(event)
  type = generic_event[:response_type] & ~0x80
  
  if type == XCB::XCB_EXPOSE
    XCB.xcb_clear_area(conn, 0, window, 0, 0, 500, 300)
    XCB.xcb_flush(conn)
    puts "üñºÔ∏è –û–∫–Ω–æ –æ—á–∏—â–µ–Ω–æ"
    
  elsif type == XCB::XCB_KEY_PRESS
    puts "‚å®Ô∏è –ö–ª–∞–≤–∏—à–∞ –Ω–∞–∂–∞—Ç–∞ (—ç—Ç–∞–ø #{stage})"
    
    if stage == 1
      # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞—Ö–≤–∞—Ç—É —É–∫–∞–∑–∞—Ç–µ–ª—è
      stage = 2
      puts "\nüéØ –≠—Ç–∞–ø #{stage}: –ó–∞—Ö–≤–∞—Ç —É–∫–∞–∑–∞—Ç–µ–ª—è..."
      
      grab_cookie = XCB.xcb_grab_pointer(
        conn, 0, window,
        XCB::XCB_EVENT_MASK_BUTTON_PRESS | XCB::XCB_EVENT_MASK_BUTTON_RELEASE,
        XCB::XCB_GRAB_MODE_ASYNC, XCB::XCB_GRAB_MODE_ASYNC,
        XCB::XCB_NONE, XCB::XCB_NONE, XCB::XCB_CURRENT_TIME, XCB::XCB_CURRENT_TIME)
      
      grab_reply = XCB.xcb_grab_pointer_reply(conn, grab_cookie, nil)
      if !grab_reply.null?
        status = grab_reply.read_uint8  # –ß–∏—Ç–∞–µ–º status –∏–∑ reply
        puts "‚úÖ –£–∫–∞–∑–∞—Ç–µ–ª—å –∑–∞—Ö–≤–∞—á–µ–Ω, status: #{status}"
        puts "üñ±Ô∏è –ö–ª–∏–∫–Ω–∏—Ç–µ –≥–¥–µ —É–≥–æ–¥–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ - —Å–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –Ω–∞—à–µ –æ–∫–Ω–æ"
      else
        puts "‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è"
      end
      
    elsif stage == 2
      # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —É–∫–∞–∑–∞—Ç–µ–ª—è –∏ –∑–∞—Ö–≤–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      stage = 3
      XCB.xcb_ungrab_pointer(conn)
      puts "‚úÖ –£–∫–∞–∑–∞—Ç–µ–ª—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω"
      
      puts "\nüéØ –≠—Ç–∞–ø #{stage}: –ó–∞—Ö–≤–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã..."
      
      kb_grab_cookie = XCB.xcb_grab_keyboard(
        conn, 0, window, XCB::XCB_CURRENT_TIME,
        XCB::XCB_GRAB_MODE_ASYNC, XCB::XCB_GRAB_MODE_ASYNC, 0)
      
      kb_grab_reply = XCB.xcb_grab_keyboard_reply(conn, kb_grab_cookie, nil)
      if !kb_grab_reply.null?
        status = kb_grab_reply.read_uint8
        puts "‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–∞, status: #{status}"
        puts "‚å®Ô∏è –ü–µ—á–∞—Ç–∞–π—Ç–µ - –≤—Å–µ –∫–ª–∞–≤–∏—à–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –Ω–∞—à–µ –æ–∫–Ω–æ"
      else
        puts "‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"
      end
      
    else
      # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      XCB.xcb_ungrab_keyboard(conn)
      puts "‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞"
      break
    end
    
  elsif type == XCB::XCB_BUTTON_PRESS
    puts "üñ±Ô∏è –ö–Ω–æ–ø–∫–∞ –º—ã—à–∏ –Ω–∞–∂–∞—Ç–∞ (—ç—Ç–∞–ø #{stage})"
    
    if stage == 2
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ —É–∫–∞–∑–∞—Ç–µ–ª—è –≤–æ –≤—Ä–µ–º—è –∑–∞—Ö–≤–∞—Ç–∞
      pointer_cookie = XCB.xcb_query_pointer(conn, window)
      pointer_reply = XCB.xcb_query_pointer_reply(conn, pointer_cookie, nil)
      
      if !pointer_reply.null?
        # –ß–∏—Ç–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ reply —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        # win_x –∏ win_y –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ —Å–º–µ—â–µ–Ω–∏—é –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        win_x = pointer_reply.get_int16(8)  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
        win_y = pointer_reply.get_int16(10)
        root_x = pointer_reply.get_int16(4)
        root_y = pointer_reply.get_int16(6)
        
        puts "üìç –ü–æ–∑–∏—Ü–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è: (#{win_x}, #{win_y}) –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∫–Ω–∞"
        puts "üìç –ü–æ–∑–∏—Ü–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ: (#{root_x}, #{root_y})"
      end
    end
  end
end

# –û—á–∏—Å—Ç–∫–∞
XCB.xcb_free_gc(conn, gc)
XCB.xcb_destroy_window(conn, window)
XCB.xcb_disconnect(conn)

puts "‚úÖ Ruby —Ç–µ—Å—Ç –∑–∞—Ö–≤–∞—Ç–∞ –≤–≤–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω"