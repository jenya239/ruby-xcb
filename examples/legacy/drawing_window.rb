#!/usr/bin/env ruby

require_relative '../lib/xcb'

puts "=== –û–∫–Ω–æ —Å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º XCB ==="

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
screen_ptr = FFI::MemoryPointer.new(:int)
conn = XCB.xcb_connect(nil, screen_ptr)

if conn.null? || XCB.xcb_connection_has_error(conn) != 0
  puts "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
  exit 1
end

# –ü–æ–ª—É—á–µ–Ω–∏–µ screen
setup = XCB.xcb_get_setup(conn)
iter = XCB.xcb_setup_roots_iterator(setup)
screen = XCB::Screen.new(iter[:data])

root = screen[:root]
visual = screen[:root_visual]
white_pixel = screen[:white_pixel]
black_pixel = screen[:black_pixel]

puts "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —ç–∫—Ä–∞–Ω—É: #{screen_ptr.read_int}"

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
window_id = XCB.xcb_generate_id(conn)
puts "‚úÖ ID –æ–∫–Ω–∞: #{window_id}"

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–∫–Ω–∞
value_mask = XCB::XCB_CW_BACK_PIXEL | XCB::XCB_CW_EVENT_MASK
value_list = FFI::MemoryPointer.new(:uint32, 2)
event_mask = XCB::XCB_EVENT_MASK_EXPOSURE
value_list.write_array_of_uint32([white_pixel, event_mask])

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
XCB.xcb_create_window(
  conn, XCB::XCB_COPY_FROM_PARENT, window_id, root,
  300, 300, 600, 400, 2,
  XCB::XCB_WINDOW_CLASS_INPUT_OUTPUT, visual,
  value_mask, value_list
)

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
gc_id = XCB.xcb_generate_id(conn)
puts "‚úÖ ID –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: #{gc_id}"

# –°–æ–∑–¥–∞–Ω–∏–µ GC —Å —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º
gc_mask = 0x00000004  # GCForeground
gc_values = FFI::MemoryPointer.new(:uint32, 1)
gc_values.write_array_of_uint32([black_pixel])

XCB.xcb_create_gc(conn, gc_id, window_id, gc_mask, gc_values)

# –ü–æ–∫–∞–∑ –æ–∫–Ω–∞
XCB.xcb_map_window(conn, window_id)
XCB.xcb_flush(conn)

puts "‚úÖ –û–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º!"
puts "üé® –†–∏—Å—É–µ–º —Ñ–∏–≥—É—Ä—ã..."

# –û—á–∏—Å—Ç–∫–∞ –æ–∫–Ω–∞ (–±–µ–ª—ã–π —Ñ–æ–Ω)
XCB.xcb_clear_area(conn, 0, window_id, 0, 0, 600, 400)
XCB.xcb_flush(conn)
puts "‚úÖ –û–∫–Ω–æ –æ—á–∏—â–µ–Ω–æ"

# –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
rect_data = FFI::MemoryPointer.new(:int16, 4)
rect_data.write_array_of_int16([50, 50, 200, 100])
XCB.xcb_poly_rectangle(conn, window_id, gc_id, 1, rect_data)
XCB.xcb_flush(conn)
puts "‚úÖ –ù–∞—Ä–∏—Å–æ–≤–∞–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫"

# –†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏
line_data = FFI::MemoryPointer.new(:int16, 4)
line_data.write_array_of_int16([100, 200, 300, 250])
XCB.xcb_poly_line(conn, 0, window_id, gc_id, 2, line_data)
XCB.xcb_flush(conn)
puts "‚úÖ –ù–∞—Ä–∏—Å–æ–≤–∞–Ω–∞ –ª–∏–Ω–∏—è"

# –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç–æ—á–µ–∫
point_data = FFI::MemoryPointer.new(:int16, 6)
point_data.write_array_of_int16([400, 100, 450, 150, 500, 200])
XCB.xcb_poly_point(conn, 0, window_id, gc_id, 3, point_data)
XCB.xcb_flush(conn)
puts "‚úÖ –ù–∞—Ä–∏—Å–æ–≤–∞–Ω—ã —Ç–æ—á–∫–∏"

puts "\nüéØ –°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã –≤ –æ–∫–Ω–µ!"
puts "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è..."

gets

# –û—á–∏—Å—Ç–∫–∞
XCB.xcb_free_gc(conn, gc_id)
XCB.xcb_destroy_window(conn, window_id)
XCB.xcb_flush(conn)
XCB.xcb_disconnect(conn)
puts "‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã" 